---
// Assets
import { Image } from "astro:assets";
import LimeStripe from "@/images/assets/LimeStripe.png";
// Fundations
import Logo from "@/components/assets/Logo.astro";
import Link from "@/components/fundations/elements/Link.astro";
import Wrapper from "@/components/fundations/containers/Wrapper.astro";
// Components
import PopupLogout from "@/components/global/PopupLogout.astro";
// Auth
import { auth } from "@/lib/auth";

// Check if user is authenticated on server side
const { session } = await auth.getSession();
const isAuthenticated = !!session?.user;

const navigationLinks = [
  {
    title: "Changelog",
    href: "/changelog/home",
  },
  {
    title: "Team",
    href: "/team/home",
  },
  {
    title: "Blog",
    href: "/blog/home",
  },
];
---

<div id="nav-wrapper" class="mx-auto fixed top-0 w-full inset-x-0 z-50">
  <Wrapper id="second-wrapper" class="standard" class="border-b">
    <div
      id="navigation-wrapper"
      class="relative flex flex-col md:items-center md:justify-between md:flex-row"
    >
      <div class="flex flex-row items-center justify-between">
        <a href="/">
          <span class="sr-only">Go to homepage</span>
          <Logo class="h-8 text-base-800" />
        </a>

        <button
          id="menu-toggle"
          class="inline-flex items-center justify-center p-2 text-base-600 hover:text-base-800 focus:outline-none focus:text-base-500 md:hidden"
        >
          <svg
            class="size-6"
            stroke="currentColor"
            fill="none"
            viewBox="0 0 24 24"
          >
            <path
              id="menu-icon"
              class="inline-flex"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M4 6h16M4 12h16M4 18h16"></path>
            <path
              id="close-icon"
              class="hidden"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      <nav
        id="navigation-menu"
        class="fixed inset-0 bg-white bg-stripes md:bg-none md:bg-transparent flex flex-col py-24 lg:p-0 h-full justify-between md:p-0 transform transition-all duration-300 ease-in-out opacity-0 -translate-y-4 pointer-events-none md:relative md:inset-auto md:opacity-100 md:pointer-events-auto md:translate-y-0"
      >
        <div
          class="absolute inset-0 pointer-events-none bg-white border-x border-base-200 mx-2 md:hidden"
        >
        </div>
        <Image
          src={LimeStripe}
          alt="Lime Stripe"
          class="absolute inset-0 size-full pointer-events-none scale-180 top-100 md:hidden"
        />
        <button
          id="menu-close"
          class="absolute top-4 right-4 md:hidden focus:outline-none text-base-800"
          aria-label="Close menu"
        >
          <svg
            class="size-4"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
        <div
          class="list-none md:ml-auto w-full flex flex-col h-full justify-between items-start px-8 md:px-0 md:flex-row md:items-center md:justify-center md:text-left gap-2 md:gap-4 relative"
        >
          <a href="/" class="md:hidden">
            <Logo class="h-4 text-base-800" />
          </a>
          <div class="flex flex-col gap-4 md:flex-row">
            {
              navigationLinks.map((link, index) => (
                <a
                  href={link.href}
                  class="hover:text-base-600 text-base-800 tracking-tighter md:tracking-normal font-semibold md:font-medium text-6xl  md:text-base"
                >
                  {link.title}
                </a>
              ))
            }
            <!-- Auth Links - conditionally rendered based on auth state -->
            <a
              id="auth-link"
              href={isAuthenticated ? "#" : "/auth/sign-in"}
              class={`hover:text-base-600 text-base-800 tracking-tighter md:tracking-normal font-semibold md:font-medium text-6xl md:text-base ${isAuthenticated ? 'cursor-pointer' : ''}`}
              data-authenticated={isAuthenticated}
            >
              {isAuthenticated ? "Log out" : "Log in"}
            </a>
          </div>
          <!-- Primary CTA Button -->
          <Link
            id="primary-cta"
            href={isAuthenticated ? "/dashboard" : "/auth/sign-up"}
            size="sm"
            variant="accent"
            class="w-full md:w-auto"
            data-authenticated={isAuthenticated}
          >
            {isAuthenticated ? "Dashboard" : "Sign up"}
          </Link>
        </div>
      </nav>
    </div>
  </Wrapper>
</div>

<!-- Add PopupLogout component -->
<PopupLogout />
<script>
  import { auth } from "@/lib/auth";

  document.addEventListener("DOMContentLoaded", async () => {
    const menuToggle = document.getElementById("menu-toggle");
    const menuClose = document.getElementById("menu-close");
    const menuIcon = document.getElementById("menu-icon");
    const closeIcon = document.getElementById("close-icon");
    const navigationMenu = document.getElementById("navigation-menu");
    const authLink = document.getElementById("auth-link");
    const primaryCta = document.getElementById("primary-cta");

    // Toggle mobile menu
    function toggleMenu(open) {
      console.log(`Toggling menu. Open: ${open}`);
      navigationMenu.classList.toggle("opacity-100", open);
      navigationMenu.classList.toggle("translate-y-0", open);
      navigationMenu.classList.toggle("pointer-events-auto", open);
      navigationMenu.classList.toggle("opacity-0", !open);
      navigationMenu.classList.toggle("-translate-y-4", !open);
      navigationMenu.classList.toggle("pointer-events-none", !open);
      menuIcon.classList.toggle("hidden", open);
      closeIcon.classList.toggle("hidden", !open);
    }

    // Update UI based on auth state
    function updateAuthUI(isAuthenticated) {
      if (authLink) {
        authLink.textContent = isAuthenticated ? "Log out" : "Log in";
        (authLink as HTMLAnchorElement).href = isAuthenticated ? "#" : "/auth/sign-in";
        authLink.dataset.authenticated = isAuthenticated.toString();
      }
      
      if (primaryCta) {
        primaryCta.textContent = isAuthenticated ? "Dashboard" : "Sign up";
        (primaryCta as HTMLAnchorElement).href = isAuthenticated ? "/dashboard" : "/auth/sign-up";
        primaryCta.dataset.authenticated = isAuthenticated.toString();
      }
    }

    // Handle logout with confirmation popup
    function handleLogout() {
      // Show the styled popup instead of browser confirm
      if ((window as any).logoutPopup) {
        (window as any).logoutPopup.show();
      } else {
        // Fallback to browser confirm if popup isn't available
        const confirmed = confirm("Are you sure you want to log out?");
        if (confirmed) {
          auth.signOut().catch((error) => {
            console.error("Logout error:", error);
            alert("Failed to log out. Please try again.");
          });
        }
      }
    }

    // Check initial auth state
    const { user } = await auth.getUser();
    const isAuthenticated = !!user;
    updateAuthUI(isAuthenticated);

    // Listen to auth state changes
    auth.onAuthStateChange((user) => {
      const isAuthenticated = !!user;
      updateAuthUI(isAuthenticated);
    });

    // Event Listeners
    menuToggle?.addEventListener("click", () => toggleMenu(true));
    menuClose?.addEventListener("click", () => toggleMenu(false));
    
    // Handle auth link clicks
    authLink?.addEventListener("click", (e) => {
      const isAuthenticated = authLink.dataset.authenticated === "true";
      if (isAuthenticated) {
        e.preventDefault();
        handleLogout();
      }
    });
  });
</script>
