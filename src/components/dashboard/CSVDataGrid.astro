---
import Text from "@/components/fundations/elements/Text.astro";
---

<div class="overflow-x-auto border border-base-200 rounded-lg">
  <div id="data-grid-container" class="min-w-full">
    <!-- Loading state -->
    <div id="grid-loading" class="p-8 text-center">
      <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-teal-600 mx-auto mb-4"></div>
      <Text tag="p" variant="textSM" class="text-base-600">
        Waiting for CSV data...
      </Text>
    </div>

    <!-- Data grid table -->
    <table id="data-grid-table" class="min-w-full divide-y divide-base-200 hidden">
      <thead class="bg-base-50">
        <tr>
          <th class="px-3 py-3 text-left text-xs font-medium text-base-500 uppercase tracking-wider sticky left-0 bg-base-50 border-r border-base-200">
            #
          </th>
          <th class="px-3 py-3 text-left text-xs font-medium text-base-500 uppercase tracking-wider min-w-[200px]">
            Domain
          </th>
          <th class="px-3 py-3 text-left text-xs font-medium text-base-500 uppercase tracking-wider min-w-[120px]">
            Buy Now Price
          </th>
          <th class="px-3 py-3 text-left text-xs font-medium text-base-500 uppercase tracking-wider min-w-[120px]">
            Floor Price
          </th>
          <th class="px-3 py-3 text-left text-xs font-medium text-base-500 uppercase tracking-wider min-w-[120px]">
            Min Offer
          </th>
          <th class="px-3 py-3 text-left text-xs font-medium text-base-500 uppercase tracking-wider min-w-[120px]">
            Lease to Own
          </th>
          <th class="px-3 py-3 text-left text-xs font-medium text-base-500 uppercase tracking-wider min-w-[140px]">
            Max Lease Period
          </th>
          <th class="px-3 py-3 text-left text-xs font-medium text-base-500 uppercase tracking-wider min-w-[200px]">
            Sale Lander
          </th>
          <th class="px-3 py-3 text-left text-xs font-medium text-base-500 uppercase tracking-wider min-w-[140px]">
            Show Buy Now
          </th>
          <th class="px-3 py-3 text-left text-xs font-medium text-base-500 uppercase tracking-wider min-w-[140px]">
            Show Lease to Own
          </th>
          <th class="px-3 py-3 text-left text-xs font-medium text-base-500 uppercase tracking-wider min-w-[140px]">
            Show Make Offer
          </th>
          <th class="px-3 py-3 text-left text-xs font-medium text-base-500 uppercase tracking-wider min-w-[100px]">
            Hidden
          </th>
          <th class="px-3 py-3 text-left text-xs font-medium text-base-500 uppercase tracking-wider w-[80px]">
            Actions
          </th>
        </tr>
      </thead>
      <tbody id="data-grid-body" class="bg-white divide-y divide-base-200">
        <!-- Rows will be dynamically generated -->
      </tbody>
    </table>

    <!-- Empty state -->
    <div id="grid-empty" class="hidden p-8 text-center">
      <Text tag="p" variant="textBase" class="text-base-600">
        No data to display. Upload a CSV file to get started.
      </Text>
    </div>
  </div>

  <!-- Bulk Actions -->
  <div id="bulk-actions" class="hidden bg-base-50 border-t border-base-200 px-4 py-3">
    <div class="flex items-center justify-between">
      <div class="flex items-center space-x-4">
        <Text tag="span" variant="textSM" class="text-base-600" id="selected-count">
          0 rows selected
        </Text>
        <button id="select-all-btn" class="text-sm text-teal-600 hover:text-teal-700">
          Select All
        </button>
        <button id="deselect-all-btn" class="text-sm text-base-600 hover:text-base-700">
          Deselect All
        </button>
      </div>
      <div class="flex items-center space-x-2">
        <button id="bulk-delete-btn" class="px-3 py-1 text-sm text-red-600 hover:text-red-700 border border-red-300 rounded hover:bg-red-50">
          Delete Selected
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Edit Modal -->
<div id="edit-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
  <div class="flex items-center justify-center min-h-screen p-4">
    <div class="bg-white rounded-lg shadow-xl max-w-md w-full p-6">
      <div class="flex justify-between items-center mb-4">
        <Text tag="h3" variant="textLG" class="font-semibold text-base-800">
          Edit Row
        </Text>
        <button id="close-modal-btn" class="text-base-400 hover:text-base-600">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      <form id="edit-form" class="space-y-4">
        <input type="hidden" id="edit-row-index" />
        
        <div>
          <label class="block text-sm font-medium text-base-700 mb-1">Domain</label>
          <input type="text" id="edit-domain" class="w-full px-3 py-2 border border-base-300 rounded-md focus:outline-none focus:ring-2 focus:ring-teal-500" required />
        </div>
        
        <div class="grid grid-cols-2 gap-4">
          <div>
            <label class="block text-sm font-medium text-base-700 mb-1">Buy Now Price (optional)</label>
            <input type="number" id="edit-buy-now-price" class="w-full px-3 py-2 border border-base-300 rounded-md focus:outline-none focus:ring-2 focus:ring-teal-500" min="0" step="0.01" placeholder="Leave blank if not applicable" />
          </div>
          <div>
            <label class="block text-sm font-medium text-base-700 mb-1">Floor Price</label>
            <input type="number" id="edit-floor-price" class="w-full px-3 py-2 border border-base-300 rounded-md focus:outline-none focus:ring-2 focus:ring-teal-500" min="0" step="0.01" />
          </div>
        </div>
        
        <div class="grid grid-cols-2 gap-4">
          <div>
            <label class="block text-sm font-medium text-base-700 mb-1">Min Offer (optional)</label>
            <input type="number" id="edit-min-offer" class="w-full px-3 py-2 border border-base-300 rounded-md focus:outline-none focus:ring-2 focus:ring-teal-500" min="0" step="0.01" placeholder="Leave blank if not applicable" />
          </div>
                  <div>
          <label class="block text-sm font-medium text-base-700 mb-1">Lease to Own (optional)</label>
          <select id="edit-lease-to-own" class="w-full px-3 py-2 border border-base-300 rounded-md focus:outline-none focus:ring-2 focus:ring-teal-500">
            <option value="">-- Blank --</option>
            <option value="Y">Y</option>
            <option value="N">N</option>
          </select>
        </div>
        </div>
        
        <div>
          <label class="block text-sm font-medium text-base-700 mb-1">Max Lease Period (2-60, optional)</label>
          <input type="number" id="edit-max-lease-period" class="w-full px-3 py-2 border border-base-300 rounded-md focus:outline-none focus:ring-2 focus:ring-teal-500" min="2" max="60" placeholder="Leave blank if not applicable" />
        </div>
        
        <div>
          <label class="block text-sm font-medium text-base-700 mb-1">Sale Lander (optional)</label>
          <input type="text" id="edit-sale-lander" class="w-full px-3 py-2 border border-base-300 rounded-md focus:outline-none focus:ring-2 focus:ring-teal-500" placeholder="Leave blank if not applicable" />
        </div>
        
        <div class="grid grid-cols-2 gap-4">
          <div>
            <label class="block text-sm font-medium text-base-700 mb-1">Show Buy Now (optional)</label>
            <select id="edit-show-buy-now" class="w-full px-3 py-2 border border-base-300 rounded-md focus:outline-none focus:ring-2 focus:ring-teal-500">
              <option value="">-- Blank --</option>
              <option value="Y">Y</option>
              <option value="N">N</option>
            </select>
          </div>
          <div>
            <label class="block text-sm font-medium text-base-700 mb-1">Show Lease to Own (optional)</label>
            <select id="edit-show-lease-to-own" class="w-full px-3 py-2 border border-base-300 rounded-md focus:outline-none focus:ring-2 focus:ring-teal-500">
              <option value="">-- Blank --</option>
              <option value="Y">Y</option>
              <option value="N">N</option>
            </select>
          </div>
        </div>
        
        <div class="grid grid-cols-2 gap-4">
          <div>
            <label class="block text-sm font-medium text-base-700 mb-1">Show Make Offer (optional)</label>
            <select id="edit-show-make-offer" class="w-full px-3 py-2 border border-base-300 rounded-md focus:outline-none focus:ring-2 focus:ring-teal-500">
              <option value="">-- Blank --</option>
              <option value="Y">Y</option>
              <option value="N">N</option>
            </select>
          </div>
          <div>
            <label class="block text-sm font-medium text-base-700 mb-1">Hidden (optional)</label>
            <select id="edit-hidden" class="w-full px-3 py-2 border border-base-300 rounded-md focus:outline-none focus:ring-2 focus:ring-teal-500">
              <option value="">-- Blank --</option>
              <option value="Y">Y</option>
              <option value="N">N</option>
            </select>
          </div>
        </div>
        
        <div class="flex justify-end space-x-3 pt-4 border-t border-base-200">
          <button type="button" id="cancel-edit-btn" class="px-4 py-2 text-sm text-base-600 border border-base-300 rounded-md hover:bg-base-50">
            Cancel
          </button>
          <button type="submit" class="px-4 py-2 text-sm text-white bg-teal-600 border border-transparent rounded-md hover:bg-teal-700">
            Save Changes
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
  import type { AfternicDomain } from '../../lib/csvProcessor';

  let gridData: AfternicDomain[] = [];
  let selectedRows = new Set<number>();

  document.addEventListener('DOMContentLoaded', () => {
    const gridLoading = document.getElementById('grid-loading');
    const gridTable = document.getElementById('data-grid-table');
    const gridEmpty = document.getElementById('grid-empty');
    const gridBody = document.getElementById('data-grid-body');
    const bulkActions = document.getElementById('bulk-actions');
    const selectedCount = document.getElementById('selected-count');
    const editModal = document.getElementById('edit-modal');

    // Listen for CSV data loaded event
    window.addEventListener('csv-data-loaded', (event: any) => {
      gridData = event.detail.data;
      renderGrid();
    });

    // Bulk action handlers
    document.getElementById('select-all-btn')?.addEventListener('click', selectAll);
    document.getElementById('deselect-all-btn')?.addEventListener('click', deselectAll);
    document.getElementById('bulk-delete-btn')?.addEventListener('click', deleteSelected);

    // Modal handlers
    document.getElementById('close-modal-btn')?.addEventListener('click', closeModal);
    document.getElementById('cancel-edit-btn')?.addEventListener('click', closeModal);
    document.getElementById('edit-form')?.addEventListener('submit', saveEdit);

    function renderGrid() {
      if (!gridBody) return;

      if (gridData.length === 0) {
        showEmpty();
        return;
      }

      showTable();
      
      // Clear existing rows
      gridBody.innerHTML = '';

      // Render data rows
      gridData.forEach((row, index) => {
        const tr = document.createElement('tr');
        tr.className = 'hover:bg-base-50';
        tr.innerHTML = `
          <td class="px-3 py-4 whitespace-nowrap text-sm text-base-900 sticky left-0 bg-white border-r border-base-200">
            <input type="checkbox" class="row-checkbox" data-index="${index}" />
          </td>
          <td class="px-3 py-4 whitespace-nowrap text-sm text-base-900 font-medium">${escapeHtml(row.domain)}</td>
          <td class="px-3 py-4 whitespace-nowrap text-sm text-base-900">${row.buyNowPrice ? '$' + row.buyNowPrice.toFixed(2) : ''}</td>
          <td class="px-3 py-4 whitespace-nowrap text-sm text-base-900">$${row.floorPrice.toFixed(2)}</td>
          <td class="px-3 py-4 whitespace-nowrap text-sm text-base-900">${row.minOffer ? '$' + row.minOffer.toFixed(2) : ''}</td>
          <td class="px-3 py-4 whitespace-nowrap text-sm text-base-900">
            ${row.leaseToOwn ? `<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${row.leaseToOwn === 'Y' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}">${row.leaseToOwn}</span>` : ''}
          </td>
          <td class="px-3 py-4 whitespace-nowrap text-sm text-base-900">${row.maxLeasePeriod ?? ''}</td>
          <td class="px-3 py-4 whitespace-nowrap text-sm text-base-900">${escapeHtml(row.saleLander)}</td>
          <td class="px-3 py-4 whitespace-nowrap text-sm text-base-900">
            ${row.showBuyNowOption ? `<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${row.showBuyNowOption === 'Y' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}">${row.showBuyNowOption}</span>` : ''}
          </td>
          <td class="px-3 py-4 whitespace-nowrap text-sm text-base-900">
            ${row.showLeaseToOwnOption ? `<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${row.showLeaseToOwnOption === 'Y' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}">${row.showLeaseToOwnOption}</span>` : ''}
          </td>
          <td class="px-3 py-4 whitespace-nowrap text-sm text-base-900">
            ${row.showMakeOfferOption ? `<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${row.showMakeOfferOption === 'Y' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}">${row.showMakeOfferOption}</span>` : ''}
          </td>
          <td class="px-3 py-4 whitespace-nowrap text-sm text-base-900">
            ${row.hidden ? `<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${row.hidden === 'Y' ? 'bg-yellow-100 text-yellow-800' : 'bg-blue-100 text-blue-800'}">${row.hidden}</span>` : ''}
          </td>
          <td class="px-3 py-4 whitespace-nowrap text-sm text-base-900">
            <button class="edit-btn text-teal-600 hover:text-teal-700" data-index="${index}">
              Edit
            </button>
          </td>
        `;
        gridBody.appendChild(tr);
      });

      // Add event listeners
      document.querySelectorAll('.row-checkbox').forEach(checkbox => {
        checkbox.addEventListener('change', handleRowSelection);
      });

      document.querySelectorAll('.edit-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const target = e.target as HTMLElement;
          const index = parseInt(target.dataset.index || '0');
          openEditModal(index);
        });
      });

      updateSelectionUI();
    }

    function showTable() {
      gridLoading?.classList.add('hidden');
      gridEmpty?.classList.add('hidden');
      gridTable?.classList.remove('hidden');
      bulkActions?.classList.remove('hidden');
    }

    function showEmpty() {
      gridLoading?.classList.add('hidden');
      gridTable?.classList.add('hidden');
      bulkActions?.classList.add('hidden');
      gridEmpty?.classList.remove('hidden');
    }

    function handleRowSelection(event: Event) {
      const target = event.target as HTMLInputElement;
      const index = parseInt(target.dataset.index || '0');
      
      if (target.checked) {
        selectedRows.add(index);
      } else {
        selectedRows.delete(index);
      }
      
      updateSelectionUI();
    }

    function updateSelectionUI() {
      if (selectedCount) {
        selectedCount.textContent = `${selectedRows.size} rows selected`;
      }
    }

    function selectAll() {
      selectedRows.clear();
      for (let i = 0; i < gridData.length; i++) {
        selectedRows.add(i);
      }
      
      document.querySelectorAll('.row-checkbox').forEach((checkbox: any) => {
        checkbox.checked = true;
      });
      
      updateSelectionUI();
    }

    function deselectAll() {
      selectedRows.clear();
      
      document.querySelectorAll('.row-checkbox').forEach((checkbox: any) => {
        checkbox.checked = false;
      });
      
      updateSelectionUI();
    }

    function deleteSelected() {
      if (selectedRows.size === 0) return;
      
      if (confirm(`Are you sure you want to delete ${selectedRows.size} rows?`)) {
        // Sort indices in descending order to avoid index shifting issues
        const sortedIndices = Array.from(selectedRows).sort((a, b) => b - a);
        
        sortedIndices.forEach(index => {
          gridData.splice(index, 1);
        });
        
        selectedRows.clear();
        renderGrid();
        
        // Update parent component
        window.dispatchEvent(new CustomEvent('csv-data-updated', { 
          detail: { data: gridData } 
        }));
      }
    }

    function openEditModal(index: number) {
      const row = gridData[index];
      if (!row) return;

      // Populate form
      (document.getElementById('edit-row-index') as HTMLInputElement).value = index.toString();
      (document.getElementById('edit-domain') as HTMLInputElement).value = row.domain;
      (document.getElementById('edit-buy-now-price') as HTMLInputElement).value = row.buyNowPrice?.toString() || '';
      (document.getElementById('edit-floor-price') as HTMLInputElement).value = row.floorPrice.toString();
      (document.getElementById('edit-min-offer') as HTMLInputElement).value = row.minOffer?.toString() || '';
      (document.getElementById('edit-lease-to-own') as HTMLSelectElement).value = row.leaseToOwn || '';
      (document.getElementById('edit-max-lease-period') as HTMLInputElement).value = row.maxLeasePeriod?.toString() || '';
      (document.getElementById('edit-sale-lander') as HTMLInputElement).value = row.saleLander;
      (document.getElementById('edit-show-buy-now') as HTMLSelectElement).value = row.showBuyNowOption || '';
      (document.getElementById('edit-show-lease-to-own') as HTMLSelectElement).value = row.showLeaseToOwnOption || '';
      (document.getElementById('edit-show-make-offer') as HTMLSelectElement).value = row.showMakeOfferOption || '';
      (document.getElementById('edit-hidden') as HTMLSelectElement).value = row.hidden || '';

      editModal?.classList.remove('hidden');
    }

    function closeModal() {
      editModal?.classList.add('hidden');
    }

    function saveEdit(event: Event) {
      event.preventDefault();
      
      const index = parseInt((document.getElementById('edit-row-index') as HTMLInputElement).value);
      
      const buyNowPriceValue = (document.getElementById('edit-buy-now-price') as HTMLInputElement).value.trim();
      const minOfferValue = (document.getElementById('edit-min-offer') as HTMLInputElement).value.trim();
      const maxLeasePeriodValue = (document.getElementById('edit-max-lease-period') as HTMLInputElement).value.trim();
      const leaseToOwnValue = (document.getElementById('edit-lease-to-own') as HTMLSelectElement).value;
      const showBuyNowValue = (document.getElementById('edit-show-buy-now') as HTMLSelectElement).value;
      const showLeaseToOwnValue = (document.getElementById('edit-show-lease-to-own') as HTMLSelectElement).value;
      const showMakeOfferValue = (document.getElementById('edit-show-make-offer') as HTMLSelectElement).value;
      const hiddenValue = (document.getElementById('edit-hidden') as HTMLSelectElement).value;
      
      const updatedRow: AfternicDomain = {
        domain: (document.getElementById('edit-domain') as HTMLInputElement).value.trim(),
        buyNowPrice: buyNowPriceValue ? parseFloat(buyNowPriceValue) : null,
        floorPrice: parseFloat((document.getElementById('edit-floor-price') as HTMLInputElement).value) || 0,
        minOffer: minOfferValue ? parseFloat(minOfferValue) : null,
        leaseToOwn: leaseToOwnValue ? (leaseToOwnValue as 'Y' | 'N') : null,
        maxLeasePeriod: maxLeasePeriodValue ? Math.min(Math.max(parseInt(maxLeasePeriodValue), 2), 60) : null,
        saleLander: (document.getElementById('edit-sale-lander') as HTMLInputElement).value.trim(),
        showBuyNowOption: showBuyNowValue ? (showBuyNowValue as 'Y' | 'N') : null,
        showLeaseToOwnOption: showLeaseToOwnValue ? (showLeaseToOwnValue as 'Y' | 'N') : null,
        showMakeOfferOption: showMakeOfferValue ? (showMakeOfferValue as 'Y' | 'N') : null,
        hidden: hiddenValue ? (hiddenValue as 'Y' | 'N') : null,
      };

      gridData[index] = updatedRow;
      renderGrid();
      closeModal();

      // Update parent component
      window.dispatchEvent(new CustomEvent('csv-data-updated', { 
        detail: { data: gridData } 
      }));
    }

    function escapeHtml(text: string): string {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }
  });
</script>