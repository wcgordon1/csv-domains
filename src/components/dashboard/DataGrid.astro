---
import Text from "@/components/fundations/elements/Text.astro";
---

<!-- Data Grid - Table display with sorting, selection, and editing -->
<div class="border border-base-200 rounded-lg" id="data-grid-container">
  <!-- Loading state -->
  <div id="grid-loading" class="p-8 text-center">
    <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-teal-600 mx-auto mb-4"></div>
    <Text tag="p" variant="textSM" class="text-base-600">
      Waiting for CSV data...
    </Text>
  </div>

  <!-- Bulk Actions - Fixed at top, full width -->
  <div id="bulk-actions" class="hidden bg-base-50 border-b border-base-200 px-4 py-3 w-full">
    <div class="flex items-center justify-between">
      <div class="flex items-center space-x-4">
        <Text tag="span" variant="textSM" class="text-base-600" id="selected-count">
          0 rows selected
        </Text>
      </div>
      <div class="flex items-center space-x-2">
        <button id="bulk-edit-btn" class="hidden px-3 py-1 text-sm text-teal-600 hover:text-teal-700 border border-teal-300 rounded hover:bg-teal-50 cursor-pointer whitespace-nowrap">
          Edit All
        </button>
        <button id="bulk-delete-btn" class="hidden px-3 py-1 text-sm text-red-600 hover:text-red-700 border border-red-300 rounded hover:bg-red-50 cursor-pointer whitespace-nowrap">
          Delete
        </button>
      </div>
    </div>
  </div>

  <!-- Scrollable table container -->
  <div class="overflow-x-auto relative">
    <!-- Data grid table -->
    <table id="data-grid-table" class="min-w-full divide-y divide-base-200 hidden">
      <thead class="bg-base-50" id="data-grid-header">
        <!-- Headers will be dynamically generated -->
      </thead>
      <tbody id="data-grid-body" class="bg-white divide-y divide-base-200">
        <!-- Rows will be dynamically generated -->
      </tbody>
    </table>
    
    <!-- Sorting loading overlay -->
    <div id="sort-loading" class="hidden absolute backdrop-blur-sm bg-white/30 z-10 left-0 right-0 bottom-0">
      <div class="flex items-center justify-center h-full min-h-[100px]">
        <Text tag="p" variant="textSM" class="text-base-700 font-medium">
          Sorting data...
        </Text>
      </div>
    </div>
  </div>

  <!-- Empty state -->
  <div id="grid-empty" class="hidden p-8 text-center">
    <Text tag="p" variant="textBase" class="text-base-600">
      No data to display. Upload a CSV file to get started.
    </Text>
  </div>
</div>

<!-- Edit Modal -->
<div id="edit-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
  <div class="flex items-center justify-center min-h-screen p-4">
    <div class="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto p-6">
      <div class="flex justify-between items-center mb-4">
        <Text tag="h3" variant="textLG" class="font-semibold text-base-800" id="modal-title">
          Edit Row
        </Text>
        <button id="close-modal-btn" class="text-base-400 hover:text-base-600 cursor-pointer">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      <form id="edit-form" class="space-y-4">
        <input type="hidden" id="edit-row-index" />
        <input type="hidden" id="edit-mode" value="single" />
        <div id="edit-fields-container" class="space-y-4">
          <!-- Fields will be dynamically generated based on current format -->
        </div>
        
        <div class="flex justify-end space-x-3 pt-4 border-t border-base-200">
          <button type="button" id="cancel-edit-btn" class="px-4 py-2 text-sm text-base-600 border border-base-300 rounded-md hover:bg-base-50 cursor-pointer">
            Cancel
          </button>
          <button type="submit" class="px-4 py-2 text-sm text-white bg-teal-600 border border-transparent rounded-md hover:bg-teal-700 cursor-pointer">
            <span id="save-btn-text">Save Changes</span>
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
  import type { CSVData } from '../../lib/csvProcessor';
  import { getFormat } from '../../lib/formatConfigs.js';

  let displayData: CSVData = { headers: [], rows: [] };
  let currentFormat = 'afternic';
  let selectedRows = new Set<number>();
  let currentSort: { column: string | null; direction: 'asc' | 'desc' | null } = { column: null, direction: null };

  document.addEventListener('DOMContentLoaded', () => {
    const gridLoading = document.getElementById('grid-loading');
    const gridTable = document.getElementById('data-grid-table');
    const gridEmpty = document.getElementById('grid-empty');
    const gridHeader = document.getElementById('data-grid-header');
    const gridBody = document.getElementById('data-grid-body');
    const bulkActions = document.getElementById('bulk-actions');
    const selectedCount = document.getElementById('selected-count');
    const editModal = document.getElementById('edit-modal');

    // Listen for display data ready
    window.addEventListener('display-data-ready', (event: any) => {
      displayData = event.detail.data;
      currentFormat = event.detail.format;
      
      // Reset sort state when new data is loaded
      currentSort = { column: null, direction: null };
      selectedRows.clear();
      
      renderGrid();
    });

    // Bulk action handlers
    document.getElementById('bulk-delete-btn')?.addEventListener('click', deleteSelected);
    document.getElementById('bulk-edit-btn')?.addEventListener('click', editSelected);

    // Modal handlers
    document.getElementById('close-modal-btn')?.addEventListener('click', closeModal);
    document.getElementById('cancel-edit-btn')?.addEventListener('click', closeModal);
    document.getElementById('edit-form')?.addEventListener('submit', saveEdit);

    function renderGrid() {
      if (!gridBody || !gridHeader) return;

      if (displayData.rows.length === 0) {
        showEmpty();
        return;
      }

      showTable();
      
      // Render headers
      renderHeaders();
      
      // Clear existing rows
      gridBody.innerHTML = '';

      // Render data rows
      displayData.rows.forEach((row, index) => {
        const tr = document.createElement('tr');
        tr.className = 'hover:bg-base-50';
        
        // Checkbox column
        const checkboxTd = document.createElement('td');
        checkboxTd.className = 'px-3 py-4 whitespace-nowrap text-sm text-base-900 sticky left-0 bg-white border-r border-base-200';
        checkboxTd.innerHTML = `<input type="checkbox" class="row-checkbox" data-index="${index}" />`;
        tr.appendChild(checkboxTd);
        
        // Data columns
        displayData.headers.forEach(header => {
          const td = document.createElement('td');
          td.className = 'px-3 py-4 whitespace-nowrap text-sm text-base-900';
          const value = row[header] || '';
          
          // Format Y/N values with badges
          if (value.toUpperCase() === 'Y' || value.toUpperCase() === 'N') {
            const badgeColor = value.toUpperCase() === 'Y' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800';
            td.innerHTML = `<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${badgeColor}">${value.toUpperCase()}</span>`;
          } 
          // Format On/Off values with badges (for Spaceship)
          else if (value === 'On' || value === 'Off') {
            const badgeColor = value === 'On' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800';
            td.innerHTML = `<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${badgeColor}">${value}</span>`;
          } else {
            td.textContent = value;
          }
          
          tr.appendChild(td);
        });
        
        // Actions column
        const actionsTd = document.createElement('td');
        actionsTd.className = 'px-3 py-4 whitespace-nowrap text-sm text-base-900';
        actionsTd.innerHTML = `<button class="edit-btn text-teal-600 hover:text-teal-700" data-index="${index}">Edit</button>`;
        tr.appendChild(actionsTd);
        
        gridBody.appendChild(tr);
      });

      // Add event listeners
      document.querySelectorAll('.row-checkbox').forEach(checkbox => {
        checkbox.addEventListener('change', handleRowSelection);
      });

      document.querySelectorAll('.edit-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const target = e.target as HTMLElement;
          const index = parseInt(target.dataset.index || '0');
          openEditModal(index);
        });
      });

      // Add master checkbox event listener
      const masterCheckbox = document.getElementById('master-checkbox') as HTMLInputElement;
      masterCheckbox?.addEventListener('change', handleMasterCheckbox);

      updateSelectionUI();
    }

    function renderHeaders() {
      if (!gridHeader) return;
      
      gridHeader.innerHTML = '';
      const tr = document.createElement('tr');
      
      // Checkbox header
      const checkboxTh = document.createElement('th');
      checkboxTh.className = 'px-3 py-3 text-left text-xs font-medium text-base-500 uppercase tracking-wider sticky left-0 bg-base-50 border-r border-base-200';
      checkboxTh.innerHTML = '<input type="checkbox" id="master-checkbox" class="cursor-pointer" />';
      tr.appendChild(checkboxTh);
      
      // Data headers
      displayData.headers.forEach(header => {
        const th = document.createElement('th');
        th.className = 'px-3 py-3 text-left text-xs font-medium text-base-500 uppercase tracking-wider min-w-[120px] cursor-pointer hover:bg-base-100 select-none';
        th.innerHTML = `${header}${getSortArrow(header)}`;
        th.addEventListener('click', () => sortByColumn(header));
        tr.appendChild(th);
      });
      
      // Actions header
      const actionsTh = document.createElement('th');
      actionsTh.className = 'px-3 py-3 text-left text-xs font-medium text-base-500 uppercase tracking-wider w-[80px]';
      actionsTh.textContent = 'Actions';
      tr.appendChild(actionsTh);
      
      gridHeader.appendChild(tr);
    }

    function showTable() {
      gridLoading?.classList.add('hidden');
      gridEmpty?.classList.add('hidden');
      gridTable?.classList.remove('hidden');
      bulkActions?.classList.remove('hidden');
    }

    function showEmpty() {
      gridLoading?.classList.add('hidden');
      gridTable?.classList.add('hidden');
      bulkActions?.classList.add('hidden');
      gridEmpty?.classList.remove('hidden');
    }

    function handleRowSelection(event: Event) {
      const target = event.target as HTMLInputElement;
      const index = parseInt(target.dataset.index || '0');
      
      if (target.checked) {
        selectedRows.add(index);
      } else {
        selectedRows.delete(index);
      }
      
      updateSelectionUI();
      
      // Update global state
      (window as any).updateSelectedRows?.(selectedRows);
    }

    function updateSelectionUI() {
      const bulkEditBtn = document.getElementById('bulk-edit-btn');
      const bulkDeleteBtn = document.getElementById('bulk-delete-btn');
      const masterCheckbox = document.getElementById('master-checkbox') as HTMLInputElement;
      
      if (selectedCount) {
        selectedCount.textContent = `${selectedRows.size} rows selected`;
      }
      
      // Update master checkbox state
      if (masterCheckbox) {
        if (selectedRows.size === 0) {
          masterCheckbox.checked = false;
          masterCheckbox.indeterminate = false;
        } else if (selectedRows.size === displayData.rows.length) {
          masterCheckbox.checked = true;
          masterCheckbox.indeterminate = false;
        } else {
          masterCheckbox.checked = false;
          masterCheckbox.indeterminate = true;
        }
      }
      
      // Show/hide buttons based on selection count
      if (selectedRows.size > 0) {
        bulkEditBtn?.classList.remove('hidden');
        bulkDeleteBtn?.classList.remove('hidden');
      } else {
        bulkEditBtn?.classList.add('hidden');
        bulkDeleteBtn?.classList.add('hidden');
      }
    }

    function handleMasterCheckbox(event: Event) {
      const target = event.target as HTMLInputElement;
      
      if (target.checked) {
        // Select all
        selectedRows.clear();
        for (let i = 0; i < displayData.rows.length; i++) {
          selectedRows.add(i);
        }
        
        document.querySelectorAll('.row-checkbox').forEach((checkbox: any) => {
          checkbox.checked = true;
        });
      } else {
        // Deselect all
        selectedRows.clear();
        
        document.querySelectorAll('.row-checkbox').forEach((checkbox: any) => {
          checkbox.checked = false;
        });
      }
      
      updateSelectionUI();
      (window as any).updateSelectedRows?.(selectedRows);
    }

    function sortByColumn(column: string) {
      // Don't sort Actions column
      if (column === 'Actions') return;

      // Show loading spinner
      showSortLoading();

      // Use setTimeout to allow UI update
      setTimeout(() => {
        // Toggle sort direction
        if (currentSort.column === column) {
          if (currentSort.direction === 'asc') {
            currentSort.direction = 'desc';
          } else if (currentSort.direction === 'desc') {
            currentSort.column = null;
            currentSort.direction = null;
          }
        } else {
          currentSort.column = column;
          currentSort.direction = 'asc';
        }

        // Sort and re-render
        applySorting();
        renderGrid();
        hideSortLoading();
      }, 100);
    }

    function applySorting() {
      if (!currentSort.column || !currentSort.direction) return;

      const column = currentSort.column;
      const direction = currentSort.direction;

      displayData.rows.sort((a, b) => {
        const aValue = a[column] || '';
        const bValue = b[column] || '';

        // Detect numeric values
        const aIsNumeric = !isNaN(parseFloat(aValue.toString().replace(/[,$]/g, ''))) && isFinite(parseFloat(aValue.toString().replace(/[,$]/g, '')));
        const bIsNumeric = !isNaN(parseFloat(bValue.toString().replace(/[,$]/g, ''))) && isFinite(parseFloat(bValue.toString().replace(/[,$]/g, '')));

        let comparison = 0;

        if (aIsNumeric && bIsNumeric) {
          const aNum = parseFloat(aValue.toString().replace(/[,$]/g, ''));
          const bNum = parseFloat(bValue.toString().replace(/[,$]/g, ''));
          comparison = aNum - bNum;
        } else {
          comparison = aValue.toString().localeCompare(bValue.toString(), undefined, { 
            numeric: true, 
            sensitivity: 'base' 
          });
        }

        return direction === 'asc' ? comparison : -comparison;
      });

      // Clear selections after sorting to avoid confusion
      selectedRows.clear();
      updateSelectionUI();
    }

    function getSortArrow(column: string): string {
      if (currentSort.column !== column) {
        return `<span class="ml-1 text-base-400">↕</span>`;
      }
      
      if (currentSort.direction === 'asc') {
        return `<span class="ml-1 text-base-600">↑</span>`;
      } else if (currentSort.direction === 'desc') {
        return `<span class="ml-1 text-base-600">↓</span>`;
      }
      
      return `<span class="ml-1 text-base-400">↕</span>`;
    }

    function showSortLoading() {
      const sortLoading = document.getElementById('sort-loading');
      const gridHeader = document.getElementById('data-grid-header');
      
      if (sortLoading && gridHeader) {
        const headerHeight = gridHeader.offsetHeight;
        sortLoading.style.top = `${headerHeight}px`;
        sortLoading.classList.remove('hidden');
      }
    }

    function hideSortLoading() {
      document.getElementById('sort-loading')?.classList.add('hidden');
    }

    function deleteSelected() {
      if (selectedRows.size === 0) return;
      
      if (confirm(`Are you sure you want to delete ${selectedRows.size} rows?`)) {
        const sortedIndices = Array.from(selectedRows).sort((a, b) => b - a);
        
        sortedIndices.forEach(index => {
          displayData.rows.splice(index, 1);
        });
        
        selectedRows.clear();
        renderGrid();
        
        // Notify container of data update
        window.dispatchEvent(new CustomEvent('csv-data-updated', { 
          detail: { data: displayData, format: currentFormat } 
        }));
      }
    }

    function editSelected() {
      if (selectedRows.size === 0) return;
      
      if (selectedRows.size === 1) {
        const index = Array.from(selectedRows)[0];
        openEditModal(index);
      } else {
        openBulkEditModal();
      }
    }

    function openEditModal(index: number) {
      // TODO: Implement edit modal with format-specific fields
      console.log('TODO: Open edit modal for row', index, 'in format', currentFormat);
    }

    function openBulkEditModal() {
      // TODO: Implement bulk edit modal
      console.log('TODO: Open bulk edit modal for', selectedRows.size, 'rows in format', currentFormat);
    }

    function closeModal() {
      editModal?.classList.add('hidden');
    }

    function saveEdit(event: Event) {
      event.preventDefault();
      // TODO: Implement save edit functionality
      console.log('TODO: Save edit functionality');
    }
  });
</script>